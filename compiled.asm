; AUTOGENERATED CODE
IN
POP  [0]     ; a
IN
POP  [1]     ; b
IN
POP  [2]     ; c
; call
; giving args
PUSH [0]     ; a
POP  [3]     ; 0 + 3
PUSH [1]     ; b
POP  [4]     ; 1 + 3
PUSH [2]     ; c
POP  [5]     ; 2 + 3
; ended giving args
; pushing old base pointer (RBX)
PUSH RBX
; shifting base pointer (RBX)
PUSH 3
POP  RBX
; ended shifting base pointer (RBX)
CALL solveSq:
POP  RBX
PUSH RAX
; call ended
POP  [0]     ; a
JMP END_OF_FUNC_solveSq: ;skipping func body
solveSq:
PUSH [RBX 0] ; a (local)
PUSH 0
CALL __EQUAL_OP__:
PUSH 0
JE IF_END_0:
; call
; giving args
PUSH [RBX 1] ; b (local)
POP  [RBX 4]     ; 0 + 4
PUSH [RBX 2] ; c (local)
POP  [RBX 5]     ; 1 + 4
; ended giving args
; pushing old base pointer (RBX)
PUSH RBX
; shifting base pointer (RBX)
PUSH RBX 4
POP  RBX
; ended shifting base pointer (RBX)
CALL solveLinear:
POP  RBX
PUSH RAX
; call ended
POP  [RBX 3] ; x (local)
PUSH [RBX 3] ; x (local)
OUT
PUSH 0
POP  RAX
RET
IF_END_0:
; call
; giving args
PUSH [RBX 0] ; a (local)
POP  [RBX 5]     ; 0 + 5
PUSH [RBX 1] ; b (local)
POP  [RBX 6]     ; 1 + 5
PUSH [RBX 2] ; c (local)
POP  [RBX 7]     ; 2 + 5
; ended giving args
; pushing old base pointer (RBX)
PUSH RBX
; shifting base pointer (RBX)
PUSH RBX 5
POP  RBX
; ended shifting base pointer (RBX)
CALL diskriminant:
POP  RBX
PUSH RAX
; call ended
POP  [RBX 4] ; diskr (local)
PUSH [RBX 4] ; diskr (local)
OUT
PUSH [RBX 4] ; diskr (local)
PUSH 0
CALL __GREATER_OP__:
PUSH 0
JE ELSE_1:
PUSH 0
PUSH [RBX 1] ; b (local)
SUB
PUSH [RBX 4] ; diskr (local)
SQRT
ADD
PUSH 2
PUSH [RBX 0] ; a (local)
MUL
DIV
POP  [RBX 5] ; x1 (local)
PUSH 0
PUSH [RBX 1] ; b (local)
SUB
PUSH [RBX 4] ; diskr (local)
SQRT
SUB
PUSH 2
PUSH [RBX 0] ; a (local)
MUL
DIV
POP  [RBX 6] ; x2 (local)
PUSH [RBX 5] ; x1 (local)
OUT
PUSH [RBX 6] ; x2 (local)
OUT
JMP ELSE_END_1:
ELSE_1:
PUSH [RBX 4] ; diskr (local)
PUSH 0
CALL __EQUAL_OP__:
PUSH 0
JE ELSE_2:
PUSH 0
PUSH [RBX 1] ; b (local)
SUB
PUSH 2
PUSH [RBX 0] ; a (local)
MUL
DIV
POP  [RBX 7] ; x (local)
PUSH [RBX 7] ; x (local)
OUT
JMP ELSE_END_2:
ELSE_2:
PUSH 52
OUT
ELSE_END_2:
ELSE_END_1:
PUSH 0
POP  RAX
RET
END_OF_FUNC_solveSq:
JMP END_OF_FUNC_diskriminant: ;skipping func body
diskriminant:
PUSH [RBX 1] ; b (local)
PUSH [RBX 1] ; b (local)
MUL
PUSH 4
PUSH [RBX 0] ; a (local)
MUL
PUSH [RBX 2] ; c (local)
MUL
SUB
POP  [RBX 3] ; diskr (local)
PUSH [RBX 3] ; diskr (local)
POP  RAX
RET
END_OF_FUNC_diskriminant:
JMP END_OF_FUNC_solveLinear: ;skipping func body
solveLinear:
PUSH 0
PUSH [RBX 1] ; b (local)
SUB
PUSH [RBX 0] ; a (local)
DIV
POP  [RBX 2] ; x (local)
PUSH [RBX 2] ; x (local)
POP  RAX
RET
END_OF_FUNC_solveLinear:
HLT


;==========FUNCS FOR MACHINE ONLY USING==========
__GREATER_OP__:
JA __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__LESS_OP__:
JB __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__GREATER_EQ_OP__:
JAE __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__LESS_EQ_OP__:
JBE __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__EQUAL_OP__:
JE __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__N_EQUAL_OP__:
JNE __RETURN_TRUE__:
JMP __RETURN_FALSE__:

__RETURN_FALSE__:
PUSH 0
RET

__RETURN_TRUE__:
PUSH 1
RET

